<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Utility</name>
    </assembly>
    <members>
        <member name="T:Utility.Collections.Comparable`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Utility.Collections.Comparable`1.System#Collections#Generic#IComparer{T}#Compare(`0,`0)">
            <summary>
            比较两个对象并返回一个值，指示一个对象是小于、等于还是大于另一个对象
            </summary>
            <param name="x">要比较的第一个对象</param>
            <param name="y">要比较的第二个对象</param>
            <returns>-1:x&lt;y, 0:x==y, 1:x&gt;y; </returns>
        </member>
        <member name="T:Utility.Collections.Comparer`1">
            <summary>
            辅助
            </summary>
            <typeparam name="T">要比较的对象的类型</typeparam>
        </member>
        <member name="M:Utility.Collections.Comparer`1.#ctor(System.Func{`0,`0,System.Int32})">
            <summary>
            
            </summary>
            <param name="callback"></param>
        </member>
        <member name="M:Utility.Collections.Comparer`1.System#Collections#Generic#IComparer{T}#Compare(`0,`0)">
            <summary>
            比较两个对象并返回一个值，指示一个对象是小于、等于还是大于另一个对象
            </summary>
            <param name="x">要比较的第一个对象</param>
            <param name="y">要比较的第二个对象</param>
            <returns>-1:x&lt;y, 0:x==y, 1:x&gt;y; </returns>
        </member>
        <member name="P:Utility.Collections.Comparer`1.Callback">
            <summary>
            比较两个对象回调方法(CompareTo的实现方法)
            </summary>
        </member>
        <member name="T:Utility.Collections.IEnumerable">
            <summary>
            
            </summary>
        </member>
        <member name="M:Utility.Collections.IEnumerable.OrderBy``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            升序排序 IComparable接口 CompareTo
            </summary>
            <typeparam name="TSource">实现IComparable接口</typeparam>
            <param name="source">排序的数据源</param>
            <returns></returns>
        </member>
        <member name="M:Utility.Collections.IEnumerable.OrderBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Int32})">
            <summary>
            升序排序
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source">排序的数据源</param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:Utility.Collections.IEnumerable.OrderBy``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            升序排序
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source">排序的数据源</param>
            <param name="comparer"></param>
            <returns></returns>
        </member>
        <member name="M:Utility.Collections.IEnumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,``1,System.Int32})">
            <summary>
            升序排序
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <param name="source">排序的数据源</param>
            <param name="keySelector"></param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:Utility.Collections.IEnumerable.OrderByDescending``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            降序排序 IComparable接口 CompareTo
            </summary>
            <typeparam name="TSource">实现IComparable接口</typeparam>
            <param name="source">排序的数据源</param>
            <returns></returns>
        </member>
        <member name="M:Utility.Collections.IEnumerable.OrderByDescending``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Int32})">
            <summary>
            降序排序
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source">排序的数据源</param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:Utility.Collections.IEnumerable.OrderByDescending``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            降序排序
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source">排序的数据源</param>
            <param name="comparer"></param>
            <returns></returns>
        </member>
        <member name="M:Utility.Collections.IEnumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,``1,System.Int32})">
            <summary>
            降序排序
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <param name="source">排序的数据源</param>
            <param name="keySelector"></param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:Utility.Collections.IEnumerable.ToStringBuilder``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.String)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="V"></typeparam>
            <param name="args"></param>
            <param name="func"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:Utility.Collections.IEnumerable.ToStringBuilder``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.String)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="K"></typeparam>
            <typeparam name="V"></typeparam>
            <param name="args"></param>
            <param name="func_key"></param>
            <param name="func_value"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="T:Utility.Core.Assist">
            <summary>
            助手
            </summary>
        </member>
        <member name="F:Utility.Core.Assist.WHITE_SPACE">
            <summary>
            空格
            </summary>
        </member>
        <member name="F:Utility.Core.Assist.ISO_DATETIME_FORMAT">
            <summary>
            yyyy-MM-dd HH:mm:ss
            </summary>
        </member>
        <member name="M:Utility.Core.Assist.ReturnParameter``1(``0)">
            <summary>
            返回参数
            </summary>
            <typeparam name="T"></typeparam>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Utility.Core.Assist.Array``1(``0[])">
            <summary>
            创建数组
            </summary>
            <typeparam name="T"></typeparam>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="T:Utility.Core.TryTo">
            <summary>
            类型转换工具类
            </summary>
        </member>
        <member name="M:Utility.Core.TryTo.TryToShort(System.Object)">
            <summary>
            </summary>
            <param name="obj"></param>
            <returns>转换失败返回null</returns>
        </member>
        <member name="M:Utility.Core.TryTo.TryToShort(System.String)">
            <summary>
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Utility.Core.TryTo.TryToInt(System.Object)">
            <summary>
            </summary>
            <param name="obj"></param>
            <returns>转换失败返回null</returns>
        </member>
        <member name="M:Utility.Core.TryTo.TryToInt(System.String)">
            <summary>
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Utility.Core.TryTo.TryToLong(System.Object)">
            <summary>
            </summary>
            <param name="obj"></param>
            <returns>转换失败返回null</returns>
        </member>
        <member name="M:Utility.Core.TryTo.TryToLong(System.String)">
            <summary>
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Utility.Core.TryTo.TryToUShort(System.Object)">
            <summary>
            </summary>
            <param name="obj"></param>
            <returns>转换失败返回null</returns>
        </member>
        <member name="M:Utility.Core.TryTo.TryToUShort(System.String)">
            <summary>
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Utility.Core.TryTo.TryToUInt(System.Object)">
            <summary>
            </summary>
            <param name="obj"></param>
            <returns>转换失败返回null</returns>
        </member>
        <member name="M:Utility.Core.TryTo.TryToUInt(System.String)">
            <summary>
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Utility.Core.TryTo.TryToULong(System.Object)">
            <summary>
            </summary>
            <param name="obj"></param>
            <returns>转换失败返回null</returns>
        </member>
        <member name="M:Utility.Core.TryTo.TryToULong(System.String)">
            <summary>
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Utility.Core.TryTo.TryToFloat(System.Object)">
            <summary>
            </summary>
            <param name="obj"></param>
            <returns>转换失败返回null</returns>
        </member>
        <member name="M:Utility.Core.TryTo.TryToFloat(System.String)">
            <summary>
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Utility.Core.TryTo.TryToDouble(System.Object)">
            <summary>
            </summary>
            <param name="obj"></param>
            <returns>转换失败返回null</returns>
        </member>
        <member name="M:Utility.Core.TryTo.TryToDouble(System.String)">
            <summary>
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Utility.Core.TryTo.TryToDecimal(System.Object)">
            <summary>
            </summary>
            <param name="obj"></param>
            <returns>转换失败返回null</returns>
        </member>
        <member name="M:Utility.Core.TryTo.TryToDecimal(System.String)">
            <summary>
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Utility.Core.TryTo.TryToChar(System.Object)">
            <summary>
            </summary>
            <param name="obj"></param>
            <returns>转换失败返回null</returns>
        </member>
        <member name="M:Utility.Core.TryTo.TryToChar(System.String)">
            <summary>
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Utility.Core.TryTo.TryToBool(System.Object)">
            <summary>
            </summary>
            <param name="obj"></param>
            <returns>转换失败返回null</returns>
        </member>
        <member name="M:Utility.Core.TryTo.TryToBool(System.String)">
            <summary>
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Utility.Core.TryTo.TryToDateTime(System.Object)">
            <summary>
            </summary>
            <param name="obj"></param>
            <returns>转换失败返回null</returns>
        </member>
        <member name="M:Utility.Core.TryTo.TryToDateTime(System.String)">
            <summary>
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="T:Utility.Core.TypeTool">
            <summary>
            类型工具类
            </summary>
            <summary>
            类型工具类
            </summary>
        </member>
        <member name="M:Utility.Core.TypeTool.IsAll``2(System.Object)">
            <summary>
            类型判断
            </summary>
        </member>
        <member name="M:Utility.Core.TypeTool.IsAny``2(System.Object)">
            <summary>
            类型判断
            </summary>
        </member>
        <member name="M:Utility.Core.TypeTool.Is``2(System.Object,System.Boolean)">
            <summary>
            类型判断 true = and, false = any
            </summary>
        </member>
        <member name="M:Utility.Core.TypeTool.IsAll``3(System.Object)">
            <summary>
            类型判断
            </summary>
        </member>
        <member name="M:Utility.Core.TypeTool.IsAny``3(System.Object)">
            <summary>
            类型判断
            </summary>
        </member>
        <member name="M:Utility.Core.TypeTool.Is``3(System.Object,System.Boolean)">
            <summary>
            类型判断 true = and, false = any
            </summary>
        </member>
        <member name="M:Utility.Core.TypeTool.IsAll``4(System.Object)">
            <summary>
            类型判断
            </summary>
        </member>
        <member name="M:Utility.Core.TypeTool.IsAny``4(System.Object)">
            <summary>
            类型判断
            </summary>
        </member>
        <member name="M:Utility.Core.TypeTool.Is``4(System.Object,System.Boolean)">
            <summary>
            类型判断 true = and, false = any
            </summary>
        </member>
        <member name="M:Utility.Core.TypeTool.IsAll``5(System.Object)">
            <summary>
            类型判断
            </summary>
        </member>
        <member name="M:Utility.Core.TypeTool.IsAny``5(System.Object)">
            <summary>
            类型判断
            </summary>
        </member>
        <member name="M:Utility.Core.TypeTool.Is``5(System.Object,System.Boolean)">
            <summary>
            类型判断 true = and, false = any
            </summary>
        </member>
        <member name="M:Utility.Core.TypeTool.IsAll``6(System.Object)">
            <summary>
            类型判断
            </summary>
        </member>
        <member name="M:Utility.Core.TypeTool.IsAny``6(System.Object)">
            <summary>
            类型判断
            </summary>
        </member>
        <member name="M:Utility.Core.TypeTool.Is``6(System.Object,System.Boolean)">
            <summary>
            类型判断 true = and, false = any
            </summary>
        </member>
        <member name="M:Utility.Core.TypeTool.IsAll``7(System.Object)">
            <summary>
            类型判断
            </summary>
        </member>
        <member name="M:Utility.Core.TypeTool.IsAny``7(System.Object)">
            <summary>
            类型判断
            </summary>
        </member>
        <member name="M:Utility.Core.TypeTool.Is``7(System.Object,System.Boolean)">
            <summary>
            类型判断 true = and, false = any
            </summary>
        </member>
        <member name="M:Utility.Core.TypeTool.IsAll``8(System.Object)">
            <summary>
            类型判断
            </summary>
        </member>
        <member name="M:Utility.Core.TypeTool.IsAny``8(System.Object)">
            <summary>
            类型判断
            </summary>
        </member>
        <member name="M:Utility.Core.TypeTool.Is``8(System.Object,System.Boolean)">
            <summary>
            类型判断 true = and, false = any
            </summary>
        </member>
        <member name="M:Utility.Core.TypeTool.IsAll``9(System.Object)">
            <summary>
            类型判断
            </summary>
        </member>
        <member name="M:Utility.Core.TypeTool.IsAny``9(System.Object)">
            <summary>
            类型判断
            </summary>
        </member>
        <member name="M:Utility.Core.TypeTool.Is``9(System.Object,System.Boolean)">
            <summary>
            类型判断 true = and, false = any
            </summary>
        </member>
        <member name="M:Utility.Core.TypeTool.IsAll``10(System.Object)">
            <summary>
            类型判断
            </summary>
        </member>
        <member name="M:Utility.Core.TypeTool.IsAny``10(System.Object)">
            <summary>
            类型判断
            </summary>
        </member>
        <member name="M:Utility.Core.TypeTool.Is``10(System.Object,System.Boolean)">
            <summary>
            类型判断 true = and, false = any
            </summary>
        </member>
        <member name="M:Utility.Core.TypeTool.IsAll``11(System.Object)">
            <summary>
            类型判断
            </summary>
        </member>
        <member name="M:Utility.Core.TypeTool.IsAny``11(System.Object)">
            <summary>
            类型判断
            </summary>
        </member>
        <member name="M:Utility.Core.TypeTool.Is``11(System.Object,System.Boolean)">
            <summary>
            类型判断 true = and, false = any
            </summary>
        </member>
        <member name="M:Utility.Core.TypeTool.IsAll``12(System.Object)">
            <summary>
            类型判断
            </summary>
        </member>
        <member name="M:Utility.Core.TypeTool.IsAny``12(System.Object)">
            <summary>
            类型判断
            </summary>
        </member>
        <member name="M:Utility.Core.TypeTool.Is``12(System.Object,System.Boolean)">
            <summary>
            类型判断 true = and, false = any
            </summary>
        </member>
        <member name="M:Utility.Core.TypeTool.IsAll``13(System.Object)">
            <summary>
            类型判断
            </summary>
        </member>
        <member name="M:Utility.Core.TypeTool.IsAny``13(System.Object)">
            <summary>
            类型判断
            </summary>
        </member>
        <member name="M:Utility.Core.TypeTool.Is``13(System.Object,System.Boolean)">
            <summary>
            类型判断 true = and, false = any
            </summary>
        </member>
        <member name="M:Utility.Core.TypeTool.IsAll``14(System.Object)">
            <summary>
            类型判断
            </summary>
        </member>
        <member name="M:Utility.Core.TypeTool.IsAny``14(System.Object)">
            <summary>
            类型判断
            </summary>
        </member>
        <member name="M:Utility.Core.TypeTool.Is``14(System.Object,System.Boolean)">
            <summary>
            类型判断 true = and, false = any
            </summary>
        </member>
        <member name="M:Utility.Core.TypeTool.IsKeyType(System.Type)">
            <summary>
            判断是否关键字类型（不包括object）
            </summary>
        </member>
        <member name="M:Utility.Core.TypeTool.IsKeyType(System.Object)">
            <summary>
            判断是否关键字类型（不包括object）
            </summary>
        </member>
        <member name="M:Utility.Core.TypeTool.IsBaseType(System.Type)">
            <summary>
            判断是否基本数据类型（不包括object）
            </summary>
        </member>
        <member name="M:Utility.Core.TypeTool.IsBaseType(System.Object)">
            <summary>
            判断是否基本数据类型（不包括object）
            </summary>
        </member>
        <member name="T:Utility.Data.DbTool">
            <summary>
            数据库
            </summary>
        </member>
        <member name="M:Utility.Data.DbTool.OpenConnection(System.Data.IDbConnection)">
            <summary>
            打开连接
            </summary>
            <param name="conn"></param>
            <returns></returns>
        </member>
        <member name="M:Utility.Data.DbTool.CloseConnection(System.Data.IDbConnection)">
            <summary>
            关闭连接
            </summary>
            <param name="conn"></param>
            <returns></returns>
        </member>
        <member name="M:Utility.Data.DbTool.CreateCommand(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{System.Data.IDataParameter})">
            <summary>
            
            </summary>
            <param name="conn"></param>
            <param name="sql"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Utility.Data.DbTool.Execute``1(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{System.Data.IDataParameter},System.Func{System.Data.IDbCommand,``0})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="conn"></param>
            <param name="sql"></param>
            <param name="args"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:Utility.Data.DbTool.ExecuteNonQuery(System.Data.IDbCommand)">
            <summary>
            IDbCommand执行ExecuteNonQuery
            </summary>
            <param name="cmd"></param>
            <returns></returns>
        </member>
        <member name="M:Utility.Data.DbTool.ExecuteScalar(System.Data.IDbCommand)">
            <summary>
            IDbCommand执行ExecuteScalar
            </summary>
            <param name="cmd"></param>
            <returns></returns>
        </member>
        <member name="M:Utility.Data.DbTool.TryAddColumn(System.Data.DataTable,System.String)">
            <summary>
            
            </summary>
            <param name="table"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Utility.Data.DbTool.ExecuteNonQuery(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{System.Data.IDataParameter})">
            <summary>
            ExecuteNonQuery
            </summary>
            <param name="conn"></param>
            <param name="sql"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Utility.Data.DbTool.ExecuteScalar(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{System.Data.IDataParameter})">
            <summary>
            
            </summary>
            <param name="conn"></param>
            <param name="sql"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Utility.Data.DbTool.ExecuteReader``1(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{System.Data.IDataParameter},System.Func{System.Data.IDataReader,``0})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="conn"></param>
            <param name="sql"></param>
            <param name="args"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:Utility.Data.DbTool.GetDataReader(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{System.Data.IDataParameter},System.Data.CommandBehavior)">
            <summary>
            
            </summary>
            <param name="conn"></param>
            <param name="sql"></param>
            <param name="args"></param>
            <param name="behavior"></param>
            <returns></returns>
        </member>
        <member name="M:Utility.Data.DbTool.IDataReaderToDataTable(System.Data.IDataReader)">
            <summary>
            IDataReader 转 DataTable
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:Utility.Data.DbTool.GetDataTable(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{System.Data.IDataParameter})">
            <summary>
            
            </summary>
            <param name="conn"></param>
            <param name="sql"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Utility.Data.DbTool.CopyParameter(System.Data.IDataParameter,System.Data.IDataParameter)">
            <summary>
            
            </summary>
            <param name="source"></param>
            <param name="destine">指定</param>
        </member>
        <member name="T:Utility.Data.DbParameter">
            <summary>
            
            </summary>
        </member>
        <member name="F:Utility.Data.DbParameter.DEFAULT_COMPARER">
            <summary>
            默认比较运算符
            </summary>
        </member>
        <member name="F:Utility.Data.DbParameter.PARAMETER_NAME_PERFIX">
            <summary>
            ParameterName的前缀
            </summary>
        </member>
        <member name="M:Utility.Data.DbParameter.AdjustmentSourceColumn(System.Data.IDataParameter,System.String,System.String)">
            <summary>
            调整SourceColumn。
            if (String.IsNullOrWhiteSpace(param.ParameterName)) return
            </summary>
            <param name="param"></param>
            <param name="field"></param>
            <param name="comparer"></param>
        </member>
        <member name="M:Utility.Data.DbParameter.GetFieldName(System.Data.IDataParameter)">
            <summary>
            在SourceColumn获取字段名。
            if (String.IsNullOrWhiteSpace(param.ParameterName)) return null;    
            </summary>
            <param name="param"></param>
            <returns>返回null，是获取不到</returns>
        </member>
        <member name="M:Utility.Data.DbParameter.Add``1(System.Collections.Generic.ICollection{``0},System.String,System.Object,System.String,System.Data.ParameterDirection)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collection"></param>
            <param name="parameterName"></param>
            <param name="value"></param>
            <param name="sourceColumn"></param>
            <param name="direction"></param>
            <returns></returns>
        </member>
        <member name="T:Utility.Data.Sql">
            <summary>
            SQL语句
            </summary>
        </member>
        <member name="M:Utility.Data.Sql.FormatSqlValue(System.Object)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Utility.Data.Sql.GetParameterName(System.Data.IDataParameter)">
            <summary>
            返回ParameterName
            </summary>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:Utility.Data.Sql.ConditionSql(System.Data.IDataParameter,System.Func{System.Data.IDataParameter,System.Object})">
            <summary>
            
            </summary>
            <param name="param"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:Utility.Data.Sql.GetConditionSql``1(``0)">
            <summary>
            
            </summary>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:Utility.Data.Sql.GetConditionSql``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Utility.Data.Sql.BuildConditionSql``1(``0)">
            <summary>
            
            </summary>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:Utility.Data.Sql.BuildConditionSql``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="T:Utility.WebForm.ControlTool">
            <summary>
            控件工具
            </summary>
        </member>
    </members>
</doc>
